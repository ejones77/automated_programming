// This output is generated by mistralai/Mixtral-8x7B-Instruct-v0.1 from huggingface.co/chat
// I provided the model the problem statement to see what comes out.

package main

import (
	"fmt"
	"log"

	"github.com/go-gota/gota/dataframe"
	"gonum.org/v1/gonum/stat"
)

type Stats struct {
	Slope         float64
	Intercept     float64
	Correlation   float64
	Rsquared      float64
	StandardError float64
}

func computeStats(df *dataframe.DataFrame) Stats {
	x := df.Col("x")
	y := df.Col("y")

	lm, err := stat.LinearRegression(x, y, nil)
	if err != nil {
		log.Fatal(err)
	}

	return Stats{
		Slope:         lm.Coefficients[0],
		Intercept:     lm.Intercept,
		Correlation:   stat.SpearmanCorrelation(x, y),
		Rsquared:      stat.RSquare(y, lm.Predict(x)),
		StandardError: stat.StdErr(lm.Residuals(), len(x)),
	}
}

func llm_stats() {
	anscombeQuartet := [][]float64{
		{10.0, 8.0, 13.0, 9.0, 7.0},
		{8.04, 6.95, 7.58, 8.81, 8.33},
		{65.2, 78.9, 84.7, 74.6, 60.1},
		{1.0, 0.8, 0.5, 0.7, 0.5},
	}

	for i, d := range anscombeQuartet {
		df := dataframe.New(d, []string{"x", "y"})
		stats := computeStats(df)

		fmt.Printf("\nAnscombe Quartet %d:\n", i+1)
		fmt.Println("Slope:", stats.Slope)
		fmt.Println("Intercept:", stats.Intercept)
		fmt.Println("Correlation Coefficient:", stats.Correlation)
		fmt.Println("R-squared:", stats.Rsquared)
		fmt.Println("Standard Error:", stats.StandardError)
	}
}
